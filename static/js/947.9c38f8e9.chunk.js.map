{"version":3,"file":"static/js/947.9c38f8e9.chunk.js","mappings":"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","sources":["components/Checkbox/Checkbox.tsx","components/DaysSelection/DaysSelection.tsx","components/BtnAddPlanToCurrentTask/BtnAddPlanToCurrentTask.tsx","components/TaskToggle/TaskToggle.tsx","components/DeleteCardModalContent/DeleteCardModalContent.tsx","components/EditAndDeleteCardBtn/EditAndDeleteCardBtn.tsx","components/TaskCard/TaskCard.tsx","components/GiftCard/GiftCard.tsx","components/CardsList/CardsList.tsx","components/OpenCardFormBtn/OpenCardFormBtn.tsx","services/helpers/getScoreString.ts"],"sourcesContent":["interface IProps {\n  label: string;\n  checked: boolean;\n  id: string;\n  name: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  disabled: boolean;\n}\nconst CheckBox: React.FC<IProps> = ({ name, label, checked, id, onChange, disabled }) => {\n  return (\n    <li className=\"mb-[8px] h-[18px] last:mb-0\">\n      <input\n        id={id}\n        name={name}\n        type=\"checkbox\"\n        checked={checked}\n        onChange={onChange}\n        className=\"checkbox mr-[10px] h-[14px] w-[14px] cursor-pointer rounded-[3px] border  border-main-bg  bg-third-color checked:border-2 checked:border-main-bg checked:hover:border-2 checked:hover:border-main-bg  focus:ring-blue-200 disabled:cursor-not-allowed disabled:bg-second-color disabled:hover:bg-second-color\"\n        disabled={disabled}\n      />\n      <label htmlFor={id} className=\"checkboxlabel text-[14px] font-bold text-main-bg \">\n        {label}\n      </label>\n    </li>\n  );\n};\n\nexport default CheckBox;\n","import { useAppSelector } from '../../redux/hooks';\nimport { compareDates, getDayOfWeek } from '../../services/helpers/date';\nimport { IDay } from '../../types/info-types';\nimport CheckBox from '../Checkbox/Checkbox';\n\ninterface IProps {\n  cardId: string;\n  selectedDays: IDay[];\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst DaysSelection: React.FC<IProps> = ({ cardId, selectedDays, handleChange }) => {\n  const { lang } = useAppSelector(store => store.auth);\n  return (\n    <ul className=\"absolute top-0 right-0 flex translate-y-[-100%] flex-col rounded-t-[6px] bg-third-color py-[10px] px-[34px]\">\n      {selectedDays?.map(({ date, isActive }) => (\n        <CheckBox\n          key={`${cardId}+${date}`}\n          id={date}\n          name={date}\n          label={getDayOfWeek(date, lang, 'short')}\n          checked={isActive}\n          disabled={compareDates(date)}\n          onChange={handleChange}\n        />\n      ))}\n    </ul>\n  );\n};\nexport default DaysSelection;\n","import DaysSelection from '../DaysSelection/DaysSelection';\nimport sprite from '../../assets/icons/sprite.svg';\nimport { useState } from 'react';\nimport { IDay } from '../../types/info-types';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\nimport { changeTaskActiveStatus } from '../../redux/info/info-operations';\nimport { toast } from 'react-toastify';\nimport DotedLoader from '../Loader/DotedLoader';\nimport text from './text.json';\n\ninterface IProps {\n  cardId: string;\n  days: IDay[];\n}\n\nconst BtnAddPlanToCurrentTask: React.FC<IProps> = ({ cardId, days }) => {\n  const { lang } = useAppSelector(store => store.auth);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isSelection, setSelection] = useState<boolean>(false);\n  const [selectedDays, setSelectedDays] = useState<IDay[]>(days);\n  const dispatch = useAppDispatch();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const { name } = e.target;\n    setSelectedDays(prevState =>\n      prevState.map(day => {\n        if (day.date === name && day.isCompleted) {\n          toast.error(`${text[lang].canNotCancelPlan}`);\n          return day;\n        }\n        return day.date === name ? { ...day, isActive: !day.isActive } : day;\n      })\n    );\n  };\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    setSelection(false);\n    const isActiveEqual = selectedDays.every((day, i) => day.isActive === days[i].isActive);\n    if (!isActiveEqual) {\n      setIsLoading(true);\n      dispatch(changeTaskActiveStatus({ days: selectedDays, taskId: cardId })).finally(() => {\n        setIsLoading(false);\n      });\n    }\n  };\n  <svg width=\"34\" height=\"34\">\n    <use href={sprite + '#ok'}></use>\n  </svg>;\n  return (\n    <>\n      {isSelection ? (\n        <form onSubmit={handleSubmit}>\n          <button type=\"submit\" className=\"flex h-[34px] w-[34px] items-center justify-center rounded-full\">\n            <svg width=\"34\" height=\"34\">\n              <use href={sprite + '#ok'}></use>\n            </svg>\n          </button>\n          <DaysSelection handleChange={handleChange} cardId={cardId} selectedDays={selectedDays} />\n        </form>\n      ) : (\n        <button\n          className=\"flex h-[34px] w-[34px] items-center justify-center rounded-full\"\n          onClick={() => {\n            setSelection(true);\n          }}\n        >\n          <svg width=\"34\" height=\"34\">\n            <use href={sprite + '#plus'}></use>\n          </svg>\n        </button>\n      )}\n      {isLoading && (\n        <div className=\"absolute right-[16px] bottom-[3px] z-10\">\n          <DotedLoader />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default BtnAddPlanToCurrentTask;\n","import DotedLoader from '../Loader/DotedLoader';\nimport sprite from '../../assets/icons/sprite.svg';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\nimport { changeTaskCompletedStatus } from '../../redux/info/info-operations';\nimport { useLocation } from 'react-router-dom';\nimport { useState } from 'react';\nimport { togglePurchase } from '../../redux/info/info-slice';\n\ninterface IProps {\n  _id: string;\n  isChecked: boolean;\n}\n\nconst TaskToggle: React.FC<IProps> = ({ _id, isChecked }) => {\n  const { selectedDay, purchasedGifts } = useAppSelector(store => store.info);\n  const { pathname } = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const awardsPagePath = pathname === '/awards' || pathname === '/awards/*';\n  const dispatch = useAppDispatch();\n  const handleChange = () => {\n    if (awardsPagePath) {\n      dispatch(togglePurchase(_id));\n    } else {\n      setIsLoading(true);\n      dispatch(changeTaskCompletedStatus({ date: selectedDay, taskId: _id })).finally(() => {\n        setIsLoading(false);\n      });\n    }\n  };\n\n  return (\n    <label htmlFor={`toggle-input${_id}+${selectedDay}`} className=\"relative inline-flex cursor-pointer items-center\">\n      <input\n        id={`toggle-input${_id}+${selectedDay}`}\n        name={_id}\n        type=\"checkbox\"\n        checked={isChecked}\n        className=\"peer sr-only\"\n        onChange={handleChange}\n        disabled={purchasedGifts.includes(_id)}\n      />\n      <div className=\"peer h-[24px] w-[48px] rounded-full bg-error-color after:absolute after:top-[2px] after:left-[2px] after:h-[20px] after:w-[20px] after:rounded-full after:border after:border-red-700 after:bg-main-bg after:transition-all after:content-[''] peer-checked:bg-fourth-color peer-checked:after:translate-x-[24px] peer-checked:after:border-green-700 peer-disabled:bg-gray-400 peer-disabled:after:border-gray-700\">\n        <p className=\"absolute right-[10px] top-0 text-[16px] font-bold text-main-bg\">!</p>\n        <svg className=\"absolute top-[7px] left-[7px]\" width={12} height={10}>\n          <use href={sprite + '#yes-checked'}></use>\n        </svg>\n      </div>\n      {isLoading && (\n        <div className=\"absolute top-[27px] left-[4px] z-10\">\n          <DotedLoader />\n        </div>\n      )}\n    </label>\n  );\n};\n\nexport default TaskToggle;\n","import { useLocation } from 'react-router-dom';\nimport { useAppSelector } from '../../redux/hooks';\nimport text from './text.json';\n\ninterface IProps {\n  onClose: () => void;\n  handleDelete: () => void;\n}\n\nconst DeleteCardModalContent: React.FC<IProps> = ({ onClose, handleDelete }) => {\n  const { lang } = useAppSelector(store => store.auth);\n  const { pathname } = useLocation();\n  const awardsPage = pathname === '/awards' || pathname === '/awards/*';\n  return (\n    <div className=\"px-[20px] pt-[40px] pb-[20px]\">\n      <p className=\"mb-[20px] text-center text-[16px] font-bold\">\n        {text[lang].areYouWantDelete} {awardsPage ? text[lang].thisAward : text[lang].thisTask}?\n      </p>\n      <div className=\"flex \">\n        <button type=\"button\" onClick={handleDelete} className=\"btn mr-[20px] w-full\">\n          {text[lang].yes}\n        </button>\n        <button type=\"button\" onClick={onClose} className=\"btn  w-full\">\n          {text[lang].no}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DeleteCardModalContent;\n","import sprite from '../../assets/icons/sprite.svg';\n\ninterface IProps {\n  onOpenEditModal: () => void;\n  onOpenDeleteModal: () => void;\n}\n\nconst EditAndDeleteCardBtn: React.FC<IProps> = ({ onOpenEditModal, onOpenDeleteModal }) => {\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"visible-on-hover absolute left-[20px] bottom-[10px] flex h-[30px] w-[30px] items-center justify-center rounded-full border-[1px] border-third-color bg-main-bg text-third-color\"\n        onClick={onOpenEditModal}\n      >\n        <svg className=\"fill-current\" width={20} height={20}>\n          <use href={sprite + '#edit'}></use>\n        </svg>\n      </button>\n      <button\n        type=\"button\"\n        className=\"visible-on-hover absolute right-[21px] bottom-[10px] flex h-[30px] w-[30px] items-center justify-center rounded-full border-[1px] border-error-color bg-main-bg text-error-color\"\n        onClick={onOpenDeleteModal}\n      >\n        <svg className=\"fill-current\" width={20} height={20}>\n          <use href={sprite + '#delete'}></use>\n        </svg>\n      </button>\n    </>\n  );\n};\n\nexport default EditAndDeleteCardBtn;\n","import { getScoreString } from '../../services/helpers/getScoreString';\nimport BtnAddPlanToCurrentTask from '../BtnAddPlanToCurrentTask/BtnAddPlanToCurrentTask';\nimport TaskToggle from '../TaskToggle/TaskToggle';\nimport sprite from '../../assets/icons/sprite.svg';\nimport { ITask } from '../../types/info-types';\nimport { useLocation } from 'react-router-dom';\nimport { getDayStatus } from '../../services/helpers/date';\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\nimport Modal from '../Modal/Modal';\nimport { useState } from 'react';\nimport NewCardForm from '../NewCardForm/NewCardForm';\nimport DeleteCardModalContent from '../DeleteCardModalContent/DeleteCardModalContent';\nimport { removeTask } from '../../redux/info/info-operations';\nimport EditAndDeleteCardBtn from '../EditAndDeleteCardBtn/EditAndDeleteCardBtn';\nimport { toast } from 'react-toastify';\nimport text from './text.json';\n\nconst TaskCard: React.FC<ITask> = ({ _id, title, reward, imageUrl, days }) => {\n  const [isEditModal, setIsEditModal] = useState(false);\n  const [isDeleteModal, setIsDeleteModal] = useState(false);\n  const { lang } = useAppSelector(store => store.auth);\n  const { selectedDay, currentChild } = useAppSelector(store => store.info);\n  const stringReward = getScoreString(reward).toUpperCase();\n  const { pathname } = useLocation();\n  const dayStatus = getDayStatus(selectedDay);\n  const planningPagePath = pathname === '/planning' || pathname === '/planning/*';\n  const mainPagePath = pathname === '/main' || pathname === '/main/*';\n  const isCompleted = days.find(day => day.date === selectedDay)?.isCompleted || false;\n  const dispatch = useAppDispatch();\n  const onOpenEditModal = () => {\n    setIsEditModal(true);\n  };\n  const onCloseEditModal = () => {\n    setIsEditModal(false);\n  };\n  const onOpenDeleteModal = () => {\n    setIsDeleteModal(true);\n  };\n  const onCloseDeleteModal = () => {\n    setIsDeleteModal(false);\n  };\n\n  const handleDelete = () => {\n    const currentTask = currentChild.tasks.find(task => task._id === _id);\n    const isCurrentTaskWasPlanned = currentTask?.days.find(day => day.isActive);\n    if (isCurrentTaskWasPlanned) {\n      toast.error(text[lang].plannedCanNotDeleted);\n      return;\n    }\n    dispatch(removeTask(_id));\n  };\n  return (\n    <li className=\"card overflow-hidden rounded-[6px] shadow-base  transition duration-500 hover:shadow-hover sTablet:w-[336px] sLaptop:w-[288px] sLaptop:hover:scale-105  sLaptop:focus:scale-105 lessTablet:w-full\">\n      <div className=\"relative flex h-[224px] items-center justify-center sTablet:h-[194px]\">\n        <img alt={title} src={imageUrl} width={280} className=\"h-full w-full\" />\n        {planningPagePath && (\n          <EditAndDeleteCardBtn onOpenEditModal={onOpenEditModal} onOpenDeleteModal={onOpenDeleteModal} />\n        )}\n      </div>\n      <div className=\"relative flex items-center justify-between bg-accent-color px-[20px] py-[16px]\">\n        <div>\n          <p className=\"mb-[4px] text-[12px] font-bold text-main-color\">{title}</p>\n          <p className=\"inline rounded-[3px] bg-third-color py-[3px] px-[10px] text-center text-[10px] font-medium text-main-bg\">\n            <>\n              {reward} {stringReward}\n            </>\n          </p>\n        </div>\n        {mainPagePath && dayStatus === 'before' && (\n          <>\n            {isCompleted ? (\n              <button\n                type=\"button\"\n                className=\"flex h-[30px] w-[30px] items-center justify-center rounded-full bg-fourth-color\"\n              >\n                <svg className=\"fill-current\" width={30} height={30}>\n                  <use href={sprite + '#yes'}></use>\n                </svg>\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"flex h-[30px] w-[30px] items-center justify-center rounded-full border-none\"\n              >\n                <svg className=\"fill-current\" width={30} height={30}>\n                  <use href={sprite + '#attention'}></use>\n                </svg>\n              </button>\n            )}\n          </>\n        )}\n        {mainPagePath && dayStatus === 'today' && <TaskToggle _id={_id} isChecked={isCompleted} />}\n        {planningPagePath && (\n          <div className=\"flex items-center\">\n            <BtnAddPlanToCurrentTask cardId={_id} days={days} />\n          </div>\n        )}\n      </div>\n      {isEditModal && (\n        <Modal onClose={onCloseEditModal}>\n          <NewCardForm task={{ _id, title, reward }} onCloseModal={onCloseEditModal} />\n        </Modal>\n      )}\n      {isDeleteModal && (\n        <Modal onClose={onCloseDeleteModal}>\n          <DeleteCardModalContent handleDelete={handleDelete} onClose={onCloseDeleteModal} />\n        </Modal>\n      )}\n    </li>\n  );\n};\n\nexport default TaskCard;\n","import { getScoreString } from '../../services/helpers/getScoreString';\nimport TaskToggle from '../TaskToggle/TaskToggle';\nimport { IGift } from '../../types/info-types';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { useState } from 'react';\nimport { removeGift } from '../../redux/info/info-operations';\nimport Modal from '../Modal/Modal';\nimport NewCardForm from '../NewCardForm/NewCardForm';\nimport DeleteCardModalContent from '../DeleteCardModalContent/DeleteCardModalContent';\nimport EditAndDeleteCardBtn from '../EditAndDeleteCardBtn/EditAndDeleteCardBtn';\n\nconst GiftCard: React.FC<IGift> = ({ _id, title, price, isPurchased, imageUrl }) => {\n  const stringReward = getScoreString(price).toUpperCase();\n  const [isEditModal, setIsEditModal] = useState(false);\n  const [isDeleteModal, setIsDeleteModal] = useState(false);\n  const dispatch = useAppDispatch();\n\n  const onOpenEditModal = () => {\n    setIsEditModal(true);\n  };\n  const onCloseEditModal = () => {\n    setIsEditModal(false);\n  };\n  const onOpenDeleteModal = () => {\n    setIsDeleteModal(true);\n  };\n  const onCloseDeleteModal = () => {\n    setIsDeleteModal(false);\n  };\n\n  const handleDelete = () => {\n    dispatch(removeGift(_id));\n  };\n  return (\n    <li className=\"card overflow-hidden rounded-[6px] shadow-base transition duration-500 hover:shadow-hover sTablet:w-[336px] sLaptop:w-[288px] sLaptop:hover:scale-105 sLaptop:focus:scale-105 lessTablet:w-full\">\n      <div className=\"relative flex h-[194px] items-center justify-center\">\n        <img alt={title} src={imageUrl} width={280} className=\" h-full w-full\" />\n        <EditAndDeleteCardBtn onOpenEditModal={onOpenEditModal} onOpenDeleteModal={onOpenDeleteModal} />\n      </div>\n      <div className=\"relative flex items-center justify-between bg-accent-color px-[20px] py-[16px]\">\n        <div>\n          <p className=\"mb-[4px] text-[12px] font-bold text-main-color\">{title}</p>\n          <p className=\"inline rounded-[3px] bg-third-color py-[3px] px-[10px] text-center text-[10px] font-medium text-main-bg\">\n            {price} {stringReward}\n          </p>\n        </div>\n        <TaskToggle isChecked={isPurchased} _id={_id} />\n      </div>\n      {isEditModal && (\n        <Modal onClose={onCloseEditModal}>\n          <NewCardForm gift={{ _id, title, price }} onCloseModal={onCloseEditModal} />\n        </Modal>\n      )}\n      {isDeleteModal && (\n        <Modal onClose={onCloseDeleteModal}>\n          <DeleteCardModalContent handleDelete={handleDelete} onClose={onCloseDeleteModal} />\n        </Modal>\n      )}\n    </li>\n  );\n};\n\nexport default GiftCard;\n","import { IGift, ITask } from '../../types/info-types';\nimport TaskCard from '../TaskCard/TaskCard';\nimport GiftCard from '../GiftCard/GiftCard';\nimport { useLocation } from 'react-router-dom';\nimport { useAppSelector } from '../../redux/hooks';\n\ninterface IProps {\n  cards: Array<ITask | IGift>;\n}\n\nconst CardList: React.FC<IProps> = ({ cards }) => {\n  const { selectedDay } = useAppSelector(store => store.info);\n  const { pathname } = useLocation();\n  const planPage = pathname === '/planning' || pathname === '/planning/*';\n\n  const elements = cards\n    ?.filter(card => {\n      if ('reward' in card) {\n        if (planPage) {\n          return true;\n        } else {\n          const dayIndex = card.days.findIndex(day => day.date === selectedDay);\n          return dayIndex >= 0 && card.days[dayIndex].isActive;\n        }\n      } else {\n        return true;\n      }\n    })\n    .map(card => {\n      if ('reward' in card) {\n        return <TaskCard key={`${card._id}card`} {...card} />;\n      } else {\n        return <GiftCard key={`${card._id}gift`} {...card} />;\n      }\n    });\n\n  return (\n    <>\n      <ul className=\"list mx-auto mt-[32px] flex flex-wrap justify-center gap-y-[20px] sTablet:mt-[40px] sTablet:gap-x-[32px] lessTablet:max-w-[376px]\">\n        {elements}\n      </ul>\n    </>\n  );\n};\n\nexport default CardList;\n","import sprite from '../../assets/icons/sprite.svg';\nimport { setFormModalStatus } from '../../redux/auth/auth-slice';\nimport { useAppDispatch } from '../../redux/hooks';\n\nconst OpenCardFormBtn: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const onOpenModal = () => {\n    dispatch(setFormModalStatus(true));\n  };\n\n  return (\n    <button\n      className=\" flex h-[54px] w-[54px] items-center rounded-full transition duration-500 hover:scale-110\"\n      onClick={onOpenModal}\n    >\n      <svg width=\"54\" height=\"54\">\n        <use href={sprite + '#add'}></use>\n      </svg>\n    </button>\n  );\n};\n\nexport default OpenCardFormBtn;\n","export function getScoreString(score: number): string {\n  const scoreArr: number[] = Array.from('' + score).map(Number);\n  const lastNum: number = scoreArr[scoreArr.length - 1];\n  const scoreString: string =\n    score === 11 || score === 12 ? 'баллов' : lastNum === 1 ? 'балл' : lastNum > 1 && lastNum < 5 ? 'балла' : 'баллов';\n  return scoreString;\n}\n"],"names":["name","label","checked","id","onChange","disabled","className","type","htmlFor","cardId","selectedDays","handleChange","lang","useAppSelector","store","auth","map","date","isActive","getDayOfWeek","compareDates","days","useState","isLoading","setIsLoading","isSelection","setSelection","setSelectedDays","dispatch","useAppDispatch","sprite","onSubmit","e","preventDefault","every","day","i","changeTaskActiveStatus","taskId","finally","width","height","href","target","prevState","isCompleted","toast","text","canNotCancelPlan","onClick","DotedLoader","_id","isChecked","info","selectedDay","purchasedGifts","pathname","useLocation","awardsPagePath","togglePurchase","changeTaskCompletedStatus","includes","onClose","handleDelete","awardsPage","areYouWantDelete","thisAward","thisTask","yes","no","onOpenEditModal","onOpenDeleteModal","title","reward","imageUrl","isEditModal","setIsEditModal","isDeleteModal","setIsDeleteModal","currentChild","stringReward","getScoreString","toUpperCase","dayStatus","getDayStatus","planningPagePath","mainPagePath","find","onCloseEditModal","onCloseDeleteModal","alt","src","Modal","NewCardForm","task","onCloseModal","currentTask","tasks","plannedCanNotDeleted","removeTask","price","isPurchased","gift","removeGift","cards","planPage","elements","filter","card","dayIndex","findIndex","setFormModalStatus","score","scoreArr","Array","from","Number","lastNum","length"],"sourceRoot":""}